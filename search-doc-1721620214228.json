{"searchDocs":[{"title":"Filtering States","type":0,"sectionRef":"#","url":"/block_wrangler/docs/basic_usage/filtering_states/","content":"","keywords":"","version":"Next"},{"title":"Filtering for missing properties​","type":1,"pageTitle":"Filtering States","url":"/block_wrangler/docs/basic_usage/filtering_states/#filtering-for-missing-properties","content":" If a block state doesn't have a certain property, it will return the sentinel value BlockState.MISSING. You can use this to find blocks that don't have a certain property, or to only exclude blocks that have the wrong value for a property, but ignore blocks that don't have it at all.  For example:  tags = load_tags() lights = tags['lights'] on = lights.where(lambda state: state.lit in [BlockState.MISSING, 'true'])  ","version":"Next","tagName":"h2"},{"title":"Combining Blocks","type":0,"sectionRef":"#","url":"/block_wrangler/docs/basic_usage/combining_blocks/","content":"Combining Blocks Block collections can be combined using a few binary operators. The + operator results in a new collection containing all the blocks in either input. The - operator results in a new collection containing all the blocks in the first input, but not the second. The &amp; operator results in a new collection containing all the blocks in both inputs.","keywords":"","version":"Next"},{"title":"Overview","type":0,"sectionRef":"#","url":"/block_wrangler/docs/overview/","content":"","keywords":"","version":"Next"},{"title":"What is Block Wrangler?​","type":1,"pageTitle":"Overview","url":"/block_wrangler/docs/overview/#what-is-block-wrangler","content":" Block Wrangler is a Python library that helps shaderpack developers manage block IDs.  It allows you to:  Attach boolean properties to blocks or block states that can be used in shadersEasily add or remove features from your shaderpack without manually editing the block IDsGuarantee that block IDs are mutually exclusive, so that shaders can be written without worrying about collisions  ","version":"Next","tagName":"h2"},{"title":"Core Types​","type":1,"pageTitle":"Overview","url":"/block_wrangler/docs/overview/#core-types","content":" ","version":"Next","tagName":"h2"},{"title":"Tags​","type":1,"pageTitle":"Overview","url":"/block_wrangler/docs/overview/#tags","content":" Block Wrangler uses tags to generate meaningful groups of blocks. They can be defined in terms of specific blocks, other tags, or a combination of both.  Vanilla Minecraft includes a number of tags, such as minecraft:crops and minecraft:logs, which can be used to represent groups of blocks.  Block Wrangler also includes a number of common tags, such as sway and lights, which can be used to kickstart your own definitions.  ","version":"Next","tagName":"h3"},{"title":"Mappings​","type":1,"pageTitle":"Overview","url":"/block_wrangler/docs/overview/#mappings","content":" Block Wrangler uses mappings to map block types to string-based identifiers that I call flags. This is the only part of Block Wrangler that knows about the numerical IDs of blocks, and is used as part of the export process.  ","version":"Next","tagName":"h3"},{"title":"Block types​","type":1,"pageTitle":"Overview","url":"/block_wrangler/docs/overview/#block-types","content":" A block type is a class that represents a specific type of block, such as minecraft:stone or minecraft:oak_log. Its definition includes its full name and all of its properties.  ","version":"Next","tagName":"h3"},{"title":"Block states​","type":1,"pageTitle":"Overview","url":"/block_wrangler/docs/overview/#block-states","content":" A block state is a specific instance of a block type, such as minecraft:oak_log:axis=y. It includes values for all of the block's properties. ","version":"Next","tagName":"h3"},{"title":"Custom Blocks","type":0,"sectionRef":"#","url":"/block_wrangler/docs/advanced_usage/custom_blocks/","content":"","keywords":"","version":"Next"},{"title":"Creating a block type​","type":1,"pageTitle":"Custom Blocks","url":"/block_wrangler/docs/advanced_usage/custom_blocks/#creating-a-block-type","content":" When constructing a BlockType object, you'll need to provide a few things:  The namespace of the blockThe name of the blockA dictionary of properties and their possible values (all strings)  For example:  from block_wrangler import BlockType my_block = BlockType('custom', 'my_block', {'my_property': ('true', 'false')})   Then you need to register the block type with the library if you want it to show up anywhere that uses the gather_blocks function:  register_block_type(my_block)   warning Tags gather block types when they are defined, so make sure you register any blocks before calling load_tags()! ","version":"Next","tagName":"h2"},{"title":"Custom Tags","type":0,"sectionRef":"#","url":"/block_wrangler/docs/advanced_usage/custom_tags/","content":"","keywords":"","version":"Next"},{"title":"Why create your own tags? Why not just use block collections?​","type":1,"pageTitle":"Custom Tags","url":"/block_wrangler/docs/advanced_usage/custom_tags/#why-create-your-own-tags-why-not-just-use-block-collections","content":" The main benefit to creating tags are that they aren't calculated until they are actually used. This means that you can create tags that depend on other tags without having to worry about the order in which you define them.  You can also modify them in multiple places without having to worry about which place is in charge of initializing the tag.  ","version":"Next","tagName":"h2"},{"title":"Creating a tag​","type":1,"pageTitle":"Custom Tags","url":"/block_wrangler/docs/advanced_usage/custom_tags/#creating-a-tag","content":" To add a tag to a TagLibrary, you can use the TagLibrary.touch method:  tags = load_tags() my_tag = tags.touch('my_tag')   Now, every time you query tags['my_tag'] or tags.touch('my_tag'), it will reference the same tag as the one you just created.  ","version":"Next","tagName":"h2"},{"title":"Adding blocks​","type":1,"pageTitle":"Custom Tags","url":"/block_wrangler/docs/advanced_usage/custom_tags/#adding-blocks","content":" Tags take block types, rather than individual block states. This means you'll need to use the block_types function to add block types to a tag, rathern than the blocks function that you would use when defining flags. To add block types to a tag, you can use the TagLibrary.add method:  tags = load_tags() tags.touch('my_tag').add(block_types('minecraft:oak_log'), filter=lambda state: state.axis == 'y')   ","version":"Next","tagName":"h2"},{"title":"Adding other tags​","type":1,"pageTitle":"Custom Tags","url":"/block_wrangler/docs/advanced_usage/custom_tags/#adding-other-tags","content":" Tags can depend on other tags! To add another tag's contents to your own, simply pass the tag to the add method instead:   tags.touch('persistent_leaves').add(tags.touch('minecraft:oak_leaves'), filter=lambda state: state.persistent == 'true')  ","version":"Next","tagName":"h2"},{"title":"Flag Types","type":0,"sectionRef":"#","url":"/block_wrangler/docs/basic_usage/flag_types/","content":"","keywords":"","version":"Next"},{"title":"Boolean Flags​","type":1,"pageTitle":"Flag Types","url":"/block_wrangler/docs/basic_usage/flag_types/#boolean-flags","content":" Boolean flags result in a function with the following signature:  bool flag(int id)   They are declared by handing the BlockMapping constructor a single block collection. For example:  BlockMapping.solve({ 'flag': tags['minecraft:flowers'] + blocks('minecraft:leaves') })   ","version":"Next","tagName":"h2"},{"title":"Series Flags​","type":1,"pageTitle":"Flag Types","url":"/block_wrangler/docs/basic_usage/flag_types/#series-flags","content":" Series flags result in a function with one of two signatures:  int flag(int id)   or  float flag(int id)   They are defined by passing a Dict[int|float, BlockCollection] to the SeriesFlag constructor. For example:  BlockMapping.solve({ 'flag': {i:tags['lights/{i}' for i in range(1, 16)]} })  ","version":"Next","tagName":"h2"},{"title":"First alpha release!","type":0,"sectionRef":"#","url":"/block_wrangler/blog/alpha-blog-post/","content":"","keywords":"","version":null},{"title":"What's next?​","type":1,"pageTitle":"First alpha release!","url":"/block_wrangler/blog/alpha-blog-post/#whats-next","content":" I have a few ideas on my wishlist for future releases:  Improve the documentation for the project, of courseAdd one or more project templates to help shaderpack developers get started with Block WranglerAdd more preset tags for features that are commonly used in shaderpacksNumerical flags support (int emission_brightness(int block_id)) ","version":null,"tagName":"h2"},{"title":"Quickstart","type":0,"sectionRef":"#","url":"/block_wrangler/docs/quickstart/","content":"","keywords":"","version":"Next"},{"title":"New Projects​","type":1,"pageTitle":"Quickstart","url":"/block_wrangler/docs/quickstart/#new-projects","content":" For new projects, we recommend using our shaderpack template. It includes the bare necessities for a shaderpack, as well as some infrastructure to make it easy to run Block Wrangler.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Quickstart","url":"/block_wrangler/docs/quickstart/#prerequisites","content":" Our template uses a command-line utility called cookiecutter to provide additional flexibility when starting a new shaderpack using Block Wrangler.  To install it, run:  pipx install cookiecutter   ","version":"Next","tagName":"h3"},{"title":"Create a Repository​","type":1,"pageTitle":"Quickstart","url":"/block_wrangler/docs/quickstart/#create-a-repository","content":" Create a new repository in your version control system of choice. Clone your repository to your local machine, but don't cd into it just yet!  In the enclosing folder, run this command to populate your new repository with the template:  cookiecutter gh:camplowell/shader_templates -f   tip This template includes a .gitignore file to prevent committing virtual environments, cache files, and other things you probably don't want to commit.  Block Wrangler is ready to use! Don't forget to commit and push your changes to your repository.  ","version":"Next","tagName":"h3"},{"title":"Existing Projects​","type":1,"pageTitle":"Quickstart","url":"/block_wrangler/docs/quickstart/#existing-projects","content":" To add Block Wrangler to existing projects, you can install it from your package manager of choice, or from source:  ","version":"Next","tagName":"h2"},{"title":"Installation​","type":1,"pageTitle":"Quickstart","url":"/block_wrangler/docs/quickstart/#installation","content":" virtual environmentuser-widefrom source python -m venv ./venv source ./venv/bin/activate pip install block-wrangler Extra features To get more detailed error messages when something goes wrong, add [fuzzy_tags] to your install command, like so: pip install block-wrangler[fuzzy_tags]   ","version":"Next","tagName":"h3"},{"title":"Repository maintenance​","type":1,"pageTitle":"Quickstart","url":"/block_wrangler/docs/quickstart/#repository-maintenance","content":" Add this .gitignore file to your repository to prevent committing virtual environments, cache files, and other things you probably don't want to commit.  Generate a requirements.txt file using:  pip freeze &gt; requirements.txt   This file will be used by contributors to ensure they have the same dependencies as you.  ","version":"Next","tagName":"h3"},{"title":"Configuration​","type":1,"pageTitle":"Quickstart","url":"/block_wrangler/docs/quickstart/#configuration","content":" At the root of your shaderpack, create a block_properties.py file with the following contents:  block_properties.py from block_wrangler import * from pathlib import Path shaderpack_root = Path(__file__).parent def main(): tags = load_tags() mapping = BlockMapping.solve({ 'sway': tags['sway'], 'sway_bottom': tags['sway/lower'] + tags['sway/short'], # Tags can be combined with the +, -, and &amp; operators 'crops': tags['minecraft:crops'], # Vanilla tags are included 'water': blocks('minecraft:water') # Individual blocks can also be referenced by name }) with shaderpack_root.joinpath('shaders/block.properties').open('w') as f: f.write(mapping.render_encoder()) with shaderpack_root.joinpath('shaders/util/block_properties.glsl').open('w') as f: f.write(mapping.render_decoder()) if __name__ == '__main__': main()   ","version":"Next","tagName":"h3"},{"title":"Usage​","type":1,"pageTitle":"Quickstart","url":"/block_wrangler/docs/quickstart/#usage","content":" run python block_properties.py to generate the block properties and decoder GLSL files. ","version":"Next","tagName":"h2"},{"title":"Finding Blocks","type":0,"sectionRef":"#","url":"/block_wrangler/docs/basic_usage/finding_blocks/","content":"","keywords":"","version":"Next"},{"title":"Literal blocks​","type":1,"pageTitle":"Finding Blocks","url":"/block_wrangler/docs/basic_usage/finding_blocks/#literal-blocks","content":" You can use the blocks function to find blocks and block states by name:  blocks('minecraft:oak_leaves', 'minecraft:redstone_ore:lit=true')   ","version":"Next","tagName":"h2"},{"title":"Tags​","type":1,"pageTitle":"Finding Blocks","url":"/block_wrangler/docs/basic_usage/finding_blocks/#tags","content":" Tags are preset functions used to find blocks and block states. You can find a list of block states within a given tag by indexing into a tag collection:  tags = load_tags() # Load pre-defined tags from the BlockWrangler library tags['minecraft:leaves'] # Find the tag named 'minecraft:leaves'   If you installed Block Wrangler with the [fuzzy_tags] option, the library will include more detailed error messaging if you misspell a tag!  ","version":"Next","tagName":"h2"},{"title":"Gathering blocks​","type":1,"pageTitle":"Finding Blocks","url":"/block_wrangler/docs/basic_usage/finding_blocks/#gathering-blocks","content":" Sometimes you may want to get all the blocks that meet certain criteria. For example, you may want to get all blocks with a certain property, or all blocks that contain a certain string in their name.  To do this, you can use the gather function.  ","version":"Next","tagName":"h2"},{"title":"Searching by an arbitrary filter​","type":1,"pageTitle":"Finding Blocks","url":"/block_wrangler/docs/basic_usage/finding_blocks/#searching-by-an-arbitrary-filter","content":" To search for blocks that meet an arbitrary filter, you can a function to the type_filter argument. It should take a BlockType and return a boolean indicating whether the block should be included in the result.  For example:  oak_blocks = gather_blocks(type_filter = lambda block: block.name.startswith('oak')) vanilla_blocks = gather_blocks(type_filter =lambda block: block.namespace == 'minecraft')   ","version":"Next","tagName":"h3"},{"title":"Searching by state​","type":1,"pageTitle":"Finding Blocks","url":"/block_wrangler/docs/basic_usage/finding_blocks/#searching-by-state","content":" To search for blocks that meet a state filter, you can pass a StateFilter to the state_filter argument. A state filter is a function that takes a BlockType and returns a boolean indicating whether the block should be included in the result.  For example:  lit_blocks = gather_blocks(state_filter = lambda state: state.lit == 'true')   ","version":"Next","tagName":"h3"},{"title":"Searching by signature​","type":1,"pageTitle":"Finding Blocks","url":"/block_wrangler/docs/basic_usage/finding_blocks/#searching-by-signature","content":" Sometimes you may want to get all the blocks with a certain property, regardless of its value. For example, you may want to get all blocks that have a lit property that can be either true or false.  To do this, you can pass a subclass of BlockState to the signature argument. Any subclasses should define certain properties and their possible values.  As a bonus, this will add type hinting to the function you pass to state_filter!  For example:  class Lightable(BlockState): lit: Literal['true', 'false'] lightable_blocks = gather_blocks(signature=Lightable)  ","version":"Next","tagName":"h3"},{"title":"Tags","type":0,"sectionRef":"#","url":"/block_wrangler/docs/library/tags/","content":"Tags Block Wrangler lights plant sway waterlogged minecraft acacia_logs air all_hanging_signs all_signs ancient_city_replaceable animals_spawnable_on anvil armadillo_spawnable_on axolotls_spawnable_on azalea_grows_on azalea_root_replaceable badlands_terracotta bamboo_blocks bamboo_plantable_on banners base_stone_nether base_stone_overworld beacon_base_blocks beds bee_growables beehives big_dripleaf_placeable birch_logs blocks_wind_charge_explosions buttons camel_sand_step_sound_blocks campfires candle_cakes candles cauldrons cave_vines ceiling_hanging_signs cherry_logs climbable coal_ores combination_step_sound_blocks completes_find_tree_tutorial concrete_powder convertable_to_mud copper_ores coral_blocks coral_plants corals crimson_stems crops crystal_sound_blocks dampens_vibrations dark_oak_logs dead_bush_may_place_on deepslate_ore_replaceables diamond_ores dirt does_not_block_hoppers doors dragon_immune dragon_transparent dripstone_replaceable_blocks emerald_ores enchantment_power_provider enchantment_power_transmitter enderman_holdable fall_damage_resetting features_cannot_replace fence_gates fences fire flower_pots flowers foxes_spawnable_on frog_prefer_jump_to frogs_spawnable_on geode_invalid_blocks goats_spawnable_on gold_ores guarded_by_piglins hoglin_repellents ice impermeable incorrect_for_diamond_tool incorrect_for_gold_tool incorrect_for_iron_tool incorrect_for_netherite_tool incorrect_for_stone_tool incorrect_for_wooden_tool infiniburn_end infiniburn_nether infiniburn_overworld inside_step_sound_blocks invalid_spawn_inside iron_ores jungle_logs lapis_ores lava_pool_stone_cannot_replace leaves logs logs_that_burn lush_ground_replaceable maintains_farmland mangrove_logs mangrove_logs_can_grow_through mangrove_roots_can_grow_through mineable mob_interactable_doors mooshrooms_spawnable_on moss_replaceable mushroom_grow_block needs_diamond_tool needs_iron_tool needs_stone_tool nether_carver_replaceables nylium oak_logs occludes_vibration_signals overworld_carver_replaceables overworld_natural_logs parrots_spawnable_on piglin_repellents planks polar_bears_spawnable_on_alternate portals pressure_plates prevent_mob_spawning_inside rabbits_spawnable_on rails redstone_ores replaceable replaceable_by_trees sand saplings sculk_replaceable sculk_replaceable_world_gen shulker_boxes signs slabs small_dripleaf_placeable small_flowers smelts_to_glass snaps_goat_horn sniffer_diggable_block sniffer_egg_hatch_boost snow snow_layer_can_survive_on snow_layer_cannot_survive_on soul_fire_base_blocks soul_speed_blocks spruce_logs stairs standing_signs stone_bricks stone_buttons stone_ore_replaceables stone_pressure_plates strider_warm_blocks sword_efficient tall_flowers terracotta trail_ruins_replaceable trapdoors underwater_bonemeals unstable_bottom_center valid_spawn vibration_resonators wall_corals wall_hanging_signs wall_post_override wall_signs walls warped_stems wart_blocks wither_immune wither_summon_base_blocks wolves_spawnable_on wooden_buttons wooden_doors wooden_fences wooden_pressure_plates wooden_slabs wooden_stairs wooden_trapdoors wool wool_carpets","keywords":"","version":"Next"},{"title":"Blocks","type":0,"sectionRef":"#","url":"/block_wrangler/docs/library/blocks/","content":"Blocks minecraft acacia_button acacia_door acacia_fence acacia_fence_gate acacia_hanging_sign acacia_leaves acacia_log acacia_planks acacia_pressure_plate acacia_sapling acacia_sign acacia_slab acacia_stairs acacia_trapdoor acacia_wall_hanging_sign acacia_wall_sign acacia_wood activator_rail air allium amethyst_block amethyst_cluster ancient_debris andesite andesite_slab andesite_stairs andesite_wall anvil attached_melon_stem attached_pumpkin_stem azalea azalea_leaves azure_bluet bamboo bamboo_block bamboo_button bamboo_door bamboo_fence bamboo_fence_gate bamboo_hanging_sign bamboo_mosaic bamboo_mosaic_slab bamboo_mosaic_stairs bamboo_planks bamboo_pressure_plate bamboo_sapling bamboo_sign bamboo_slab bamboo_stairs bamboo_trapdoor bamboo_wall_hanging_sign bamboo_wall_sign barrel barrier basalt beacon bedrock bee_nest beehive beetroots bell big_dripleaf big_dripleaf_stem birch_button birch_door birch_fence birch_fence_gate birch_hanging_sign birch_leaves birch_log birch_planks birch_pressure_plate birch_sapling birch_sign birch_slab birch_stairs birch_trapdoor birch_wall_hanging_sign birch_wall_sign birch_wood black_banner black_bed black_candle black_candle_cake black_carpet black_concrete black_concrete_powder black_glazed_terracotta black_shulker_box black_stained_glass black_stained_glass_pane black_terracotta black_wall_banner black_wool blackstone blackstone_slab blackstone_stairs blackstone_wall blast_furnace blue_banner blue_bed blue_candle blue_candle_cake blue_carpet blue_concrete blue_concrete_powder blue_glazed_terracotta blue_ice blue_orchid blue_shulker_box blue_stained_glass blue_stained_glass_pane blue_terracotta blue_wall_banner blue_wool bone_block bookshelf brain_coral brain_coral_block brain_coral_fan brain_coral_wall_fan brewing_stand brick_slab brick_stairs brick_wall bricks brown_banner brown_bed brown_candle brown_candle_cake brown_carpet brown_concrete brown_concrete_powder brown_glazed_terracotta brown_mushroom brown_mushroom_block brown_shulker_box brown_stained_glass brown_stained_glass_pane brown_terracotta brown_wall_banner brown_wool bubble_column bubble_coral bubble_coral_block bubble_coral_fan bubble_coral_wall_fan budding_amethyst cactus cake calcite calibrated_sculk_sensor campfire candle candle_cake carrots cartography_table carved_pumpkin cauldron cave_air cave_vines cave_vines_plant chain chain_command_block cherry_button cherry_door cherry_fence cherry_fence_gate cherry_hanging_sign cherry_leaves cherry_log cherry_planks cherry_pressure_plate cherry_sapling cherry_sign cherry_slab cherry_stairs cherry_trapdoor cherry_wall_hanging_sign cherry_wall_sign cherry_wood chest chipped_anvil chiseled_bookshelf chiseled_copper chiseled_deepslate chiseled_nether_bricks chiseled_polished_blackstone chiseled_quartz_block chiseled_red_sandstone chiseled_sandstone chiseled_stone_bricks chiseled_tuff chiseled_tuff_bricks chorus_flower chorus_plant clay coal_block coal_ore coarse_dirt cobbled_deepslate cobbled_deepslate_slab cobbled_deepslate_stairs cobbled_deepslate_wall cobblestone cobblestone_slab cobblestone_stairs cobblestone_wall cobweb cocoa command_block comparator composter conduit copper_block copper_bulb copper_door copper_grate copper_ore copper_trapdoor cornflower cracked_deepslate_bricks cracked_deepslate_tiles cracked_nether_bricks cracked_polished_blackstone_bricks cracked_stone_bricks crafter crafting_table creeper_head creeper_wall_head crimson_button crimson_door crimson_fence crimson_fence_gate crimson_fungus crimson_hanging_sign crimson_hyphae crimson_nylium crimson_planks crimson_pressure_plate crimson_roots crimson_sign crimson_slab crimson_stairs crimson_stem crimson_trapdoor crimson_wall_hanging_sign crimson_wall_sign crying_obsidian cut_copper cut_copper_slab cut_copper_stairs cut_red_sandstone cut_red_sandstone_slab cut_sandstone cut_sandstone_slab cyan_banner cyan_bed cyan_candle cyan_candle_cake cyan_carpet cyan_concrete cyan_concrete_powder cyan_glazed_terracotta cyan_shulker_box cyan_stained_glass cyan_stained_glass_pane cyan_terracotta cyan_wall_banner cyan_wool damaged_anvil dandelion dark_oak_button dark_oak_door dark_oak_fence dark_oak_fence_gate dark_oak_hanging_sign dark_oak_leaves dark_oak_log dark_oak_planks dark_oak_pressure_plate dark_oak_sapling dark_oak_sign dark_oak_slab dark_oak_stairs dark_oak_trapdoor dark_oak_wall_hanging_sign dark_oak_wall_sign dark_oak_wood dark_prismarine dark_prismarine_slab dark_prismarine_stairs daylight_detector dead_brain_coral dead_brain_coral_block dead_brain_coral_fan dead_brain_coral_wall_fan dead_bubble_coral dead_bubble_coral_block dead_bubble_coral_fan dead_bubble_coral_wall_fan dead_bush dead_fire_coral dead_fire_coral_block dead_fire_coral_fan dead_fire_coral_wall_fan dead_horn_coral dead_horn_coral_block dead_horn_coral_fan dead_horn_coral_wall_fan dead_tube_coral dead_tube_coral_block dead_tube_coral_fan dead_tube_coral_wall_fan decorated_pot deepslate deepslate_brick_slab deepslate_brick_stairs deepslate_brick_wall deepslate_bricks deepslate_coal_ore deepslate_copper_ore deepslate_diamond_ore deepslate_emerald_ore deepslate_gold_ore deepslate_iron_ore deepslate_lapis_ore deepslate_redstone_ore deepslate_tile_slab deepslate_tile_stairs deepslate_tile_wall deepslate_tiles detector_rail diamond_block diamond_ore diorite diorite_slab diorite_stairs diorite_wall dirt dirt_path dispenser dragon_egg dragon_head dragon_wall_head dried_kelp_block dripstone_block dropper emerald_block emerald_ore enchanting_table end_gateway end_portal end_portal_frame end_rod end_stone end_stone_brick_slab end_stone_brick_stairs end_stone_brick_wall end_stone_bricks ender_chest exposed_chiseled_copper exposed_copper exposed_copper_bulb exposed_copper_door exposed_copper_grate exposed_copper_trapdoor exposed_cut_copper exposed_cut_copper_slab exposed_cut_copper_stairs farmland fern fire fire_coral fire_coral_block fire_coral_fan fire_coral_wall_fan fletching_table flower_pot flowering_azalea flowering_azalea_leaves frogspawn frosted_ice furnace gilded_blackstone glass glass_pane glow_lichen glowstone gold_block gold_ore granite granite_slab granite_stairs granite_wall grass_block gravel gray_banner gray_bed gray_candle gray_candle_cake gray_carpet gray_concrete gray_concrete_powder gray_glazed_terracotta gray_shulker_box gray_stained_glass gray_stained_glass_pane gray_terracotta gray_wall_banner gray_wool green_banner green_bed green_candle green_candle_cake green_carpet green_concrete green_concrete_powder green_glazed_terracotta green_shulker_box green_stained_glass green_stained_glass_pane green_terracotta green_wall_banner green_wool grindstone hanging_roots hay_block heavy_core heavy_weighted_pressure_plate honey_block honeycomb_block hopper horn_coral horn_coral_block horn_coral_fan horn_coral_wall_fan ice infested_chiseled_stone_bricks infested_cobblestone infested_cracked_stone_bricks infested_deepslate infested_mossy_stone_bricks infested_stone infested_stone_bricks iron_bars iron_block iron_door iron_ore iron_trapdoor jack_o_lantern jigsaw jukebox jungle_button jungle_door jungle_fence jungle_fence_gate jungle_hanging_sign jungle_leaves jungle_log jungle_planks jungle_pressure_plate jungle_sapling jungle_sign jungle_slab jungle_stairs jungle_trapdoor jungle_wall_hanging_sign jungle_wall_sign jungle_wood kelp kelp_plant ladder lantern lapis_block lapis_ore large_amethyst_bud large_fern lava lava_cauldron lectern lever light light_blue_banner light_blue_bed light_blue_candle light_blue_candle_cake light_blue_carpet light_blue_concrete light_blue_concrete_powder light_blue_glazed_terracotta light_blue_shulker_box light_blue_stained_glass light_blue_stained_glass_pane light_blue_terracotta light_blue_wall_banner light_blue_wool light_gray_banner light_gray_bed light_gray_candle light_gray_candle_cake light_gray_carpet light_gray_concrete light_gray_concrete_powder light_gray_glazed_terracotta light_gray_shulker_box light_gray_stained_glass light_gray_stained_glass_pane light_gray_terracotta light_gray_wall_banner light_gray_wool light_weighted_pressure_plate lightning_rod lilac lily_of_the_valley lily_pad lime_banner lime_bed lime_candle lime_candle_cake lime_carpet lime_concrete lime_concrete_powder lime_glazed_terracotta lime_shulker_box lime_stained_glass lime_stained_glass_pane lime_terracotta lime_wall_banner lime_wool lodestone loom magenta_banner magenta_bed magenta_candle magenta_candle_cake magenta_carpet magenta_concrete magenta_concrete_powder magenta_glazed_terracotta magenta_shulker_box magenta_stained_glass magenta_stained_glass_pane magenta_terracotta magenta_wall_banner magenta_wool magma_block mangrove_button mangrove_door mangrove_fence mangrove_fence_gate mangrove_hanging_sign mangrove_leaves mangrove_log mangrove_planks mangrove_pressure_plate mangrove_propagule mangrove_roots mangrove_sign mangrove_slab mangrove_stairs mangrove_trapdoor mangrove_wall_hanging_sign mangrove_wall_sign mangrove_wood medium_amethyst_bud melon melon_stem moss_block moss_carpet mossy_cobblestone mossy_cobblestone_slab mossy_cobblestone_stairs mossy_cobblestone_wall mossy_stone_brick_slab mossy_stone_brick_stairs mossy_stone_brick_wall mossy_stone_bricks moving_piston mud mud_brick_slab mud_brick_stairs mud_brick_wall mud_bricks muddy_mangrove_roots mushroom_stem mycelium nether_brick_fence nether_brick_slab nether_brick_stairs nether_brick_wall nether_bricks nether_gold_ore nether_portal nether_quartz_ore nether_sprouts nether_wart nether_wart_block netherite_block netherrack note_block oak_button oak_door oak_fence oak_fence_gate oak_hanging_sign oak_leaves oak_log oak_planks oak_pressure_plate oak_sapling oak_sign oak_slab oak_stairs oak_trapdoor oak_wall_hanging_sign oak_wall_sign oak_wood observer obsidian ochre_froglight orange_banner orange_bed orange_candle orange_candle_cake orange_carpet orange_concrete orange_concrete_powder orange_glazed_terracotta orange_shulker_box orange_stained_glass orange_stained_glass_pane orange_terracotta orange_tulip orange_wall_banner orange_wool oxeye_daisy oxidized_chiseled_copper oxidized_copper oxidized_copper_bulb oxidized_copper_door oxidized_copper_grate oxidized_copper_trapdoor oxidized_cut_copper oxidized_cut_copper_slab oxidized_cut_copper_stairs packed_ice packed_mud pearlescent_froglight peony petrified_oak_slab piglin_head piglin_wall_head pink_banner pink_bed pink_candle pink_candle_cake pink_carpet pink_concrete pink_concrete_powder pink_glazed_terracotta pink_petals pink_shulker_box pink_stained_glass pink_stained_glass_pane pink_terracotta pink_tulip pink_wall_banner pink_wool piston piston_head pitcher_crop pitcher_plant player_head player_wall_head podzol pointed_dripstone polished_andesite polished_andesite_slab polished_andesite_stairs polished_basalt polished_blackstone polished_blackstone_brick_slab polished_blackstone_brick_stairs polished_blackstone_brick_wall polished_blackstone_bricks polished_blackstone_button polished_blackstone_pressure_plate polished_blackstone_slab polished_blackstone_stairs polished_blackstone_wall polished_deepslate polished_deepslate_slab polished_deepslate_stairs polished_deepslate_wall polished_diorite polished_diorite_slab polished_diorite_stairs polished_granite polished_granite_slab polished_granite_stairs polished_tuff polished_tuff_slab polished_tuff_stairs polished_tuff_wall poppy potatoes potted_acacia_sapling potted_allium potted_azalea_bush potted_azure_bluet potted_bamboo potted_birch_sapling potted_blue_orchid potted_brown_mushroom potted_cactus potted_cherry_sapling potted_cornflower potted_crimson_fungus potted_crimson_roots potted_dandelion potted_dark_oak_sapling potted_dead_bush potted_fern potted_flowering_azalea_bush potted_jungle_sapling potted_lily_of_the_valley potted_mangrove_propagule potted_oak_sapling potted_orange_tulip potted_oxeye_daisy potted_pink_tulip potted_poppy potted_red_mushroom potted_red_tulip potted_spruce_sapling potted_torchflower potted_warped_fungus potted_warped_roots potted_white_tulip potted_wither_rose powder_snow powder_snow_cauldron powered_rail prismarine prismarine_brick_slab prismarine_brick_stairs prismarine_bricks prismarine_slab prismarine_stairs prismarine_wall pumpkin pumpkin_stem purple_banner purple_bed purple_candle purple_candle_cake purple_carpet purple_concrete purple_concrete_powder purple_glazed_terracotta purple_shulker_box purple_stained_glass purple_stained_glass_pane purple_terracotta purple_wall_banner purple_wool purpur_block purpur_pillar purpur_slab purpur_stairs quartz_block quartz_bricks quartz_pillar quartz_slab quartz_stairs rail raw_copper_block raw_gold_block raw_iron_block red_banner red_bed red_candle red_candle_cake red_carpet red_concrete red_concrete_powder red_glazed_terracotta red_mushroom red_mushroom_block red_nether_brick_slab red_nether_brick_stairs red_nether_brick_wall red_nether_bricks red_sand red_sandstone red_sandstone_slab red_sandstone_stairs red_sandstone_wall red_shulker_box red_stained_glass red_stained_glass_pane red_terracotta red_tulip red_wall_banner red_wool redstone_block redstone_lamp redstone_ore redstone_torch redstone_wall_torch redstone_wire reinforced_deepslate repeater repeating_command_block respawn_anchor rooted_dirt rose_bush sand sandstone sandstone_slab sandstone_stairs sandstone_wall scaffolding sculk sculk_catalyst sculk_sensor sculk_shrieker sculk_vein sea_lantern sea_pickle seagrass short_grass shroomlight shulker_box skeleton_skull skeleton_wall_skull slime_block small_amethyst_bud small_dripleaf smithing_table smoker smooth_basalt smooth_quartz smooth_quartz_slab smooth_quartz_stairs smooth_red_sandstone smooth_red_sandstone_slab smooth_red_sandstone_stairs smooth_sandstone smooth_sandstone_slab smooth_sandstone_stairs smooth_stone smooth_stone_slab sniffer_egg snow snow_block soul_campfire soul_fire soul_lantern soul_sand soul_soil soul_torch soul_wall_torch spawner sponge spore_blossom spruce_button spruce_door spruce_fence spruce_fence_gate spruce_hanging_sign spruce_leaves spruce_log spruce_planks spruce_pressure_plate spruce_sapling spruce_sign spruce_slab spruce_stairs spruce_trapdoor spruce_wall_hanging_sign spruce_wall_sign spruce_wood sticky_piston stone stone_brick_slab stone_brick_stairs stone_brick_wall stone_bricks stone_button stone_pressure_plate stone_slab stone_stairs stonecutter stripped_acacia_log stripped_acacia_wood stripped_bamboo_block stripped_birch_log stripped_birch_wood stripped_cherry_log stripped_cherry_wood stripped_crimson_hyphae stripped_crimson_stem stripped_dark_oak_log stripped_dark_oak_wood stripped_jungle_log stripped_jungle_wood stripped_mangrove_log stripped_mangrove_wood stripped_oak_log stripped_oak_wood stripped_spruce_log stripped_spruce_wood stripped_warped_hyphae stripped_warped_stem structure_block structure_void sugar_cane sunflower suspicious_gravel suspicious_sand sweet_berry_bush tall_grass tall_seagrass target terracotta tinted_glass tnt torch torchflower torchflower_crop trapped_chest trial_spawner tripwire tripwire_hook tube_coral tube_coral_block tube_coral_fan tube_coral_wall_fan tuff tuff_brick_slab tuff_brick_stairs tuff_brick_wall tuff_bricks tuff_slab tuff_stairs tuff_wall turtle_egg twisting_vines twisting_vines_plant vault verdant_froglight vine void_air wall_torch warped_button warped_door warped_fence warped_fence_gate warped_fungus warped_hanging_sign warped_hyphae warped_nylium warped_planks warped_pressure_plate warped_roots warped_sign warped_slab warped_stairs warped_stem warped_trapdoor warped_wall_hanging_sign warped_wall_sign warped_wart_block water water_cauldron waxed_chiseled_copper waxed_copper_block waxed_copper_bulb waxed_copper_door waxed_copper_grate waxed_copper_trapdoor waxed_cut_copper waxed_cut_copper_slab waxed_cut_copper_stairs waxed_exposed_chiseled_copper waxed_exposed_copper waxed_exposed_copper_bulb waxed_exposed_copper_door waxed_exposed_copper_grate waxed_exposed_copper_trapdoor waxed_exposed_cut_copper waxed_exposed_cut_copper_slab waxed_exposed_cut_copper_stairs waxed_oxidized_chiseled_copper waxed_oxidized_copper waxed_oxidized_copper_bulb waxed_oxidized_copper_door waxed_oxidized_copper_grate waxed_oxidized_copper_trapdoor waxed_oxidized_cut_copper waxed_oxidized_cut_copper_slab waxed_oxidized_cut_copper_stairs waxed_weathered_chiseled_copper waxed_weathered_copper waxed_weathered_copper_bulb waxed_weathered_copper_door waxed_weathered_copper_grate waxed_weathered_copper_trapdoor waxed_weathered_cut_copper waxed_weathered_cut_copper_slab waxed_weathered_cut_copper_stairs weathered_chiseled_copper weathered_copper weathered_copper_bulb weathered_copper_door weathered_copper_grate weathered_copper_trapdoor weathered_cut_copper weathered_cut_copper_slab weathered_cut_copper_stairs weeping_vines weeping_vines_plant wet_sponge wheat white_banner white_bed white_candle white_candle_cake white_carpet white_concrete white_concrete_powder white_glazed_terracotta white_shulker_box white_stained_glass white_stained_glass_pane white_terracotta white_tulip white_wall_banner white_wool wither_rose wither_skeleton_skull wither_skeleton_wall_skull yellow_banner yellow_bed yellow_candle yellow_candle_cake yellow_carpet yellow_concrete yellow_concrete_powder yellow_glazed_terracotta yellow_shulker_box yellow_stained_glass yellow_stained_glass_pane yellow_terracotta yellow_wall_banner yellow_wool zombie_head zombie_wall_head","keywords":"","version":"Next"}],"options":{"id":"default"}}