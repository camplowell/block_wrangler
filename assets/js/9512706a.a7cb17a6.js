"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[94],{8537:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var n=s(4848),o=s(8453);const i={description:"How to filter block collections based on their states"},r="Filtering States",a={id:"basic_usage/filtering_states",title:"Filtering States",description:"How to filter block collections based on their states",source:"@site/docs/basic_usage/filtering_states.mdx",sourceDirName:"basic_usage",slug:"/basic_usage/filtering_states",permalink:"/block_wrangler/docs/basic_usage/filtering_states",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{description:"How to filter block collections based on their states"},sidebar:"tutorialSidebar",previous:{title:"Combining Blocks",permalink:"/block_wrangler/docs/basic_usage/combining_blocks"},next:{title:"Custom Blocks",permalink:"/block_wrangler/docs/advanced_usage/custom_blocks"}},l={},c=[{value:"Filtering for missing properties",id:"filtering-for-missing-properties",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"filtering-states",children:"Filtering States"}),"\n",(0,n.jsxs)(t.p,{children:["Sometimes you may want to further narrow down an existing block collection based on its state.\nTo do so, you can use the ",(0,n.jsx)(t.code,{children:"where"})," function."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:"logs = gather_blocks(type_filter=lambda block: block.name.startswith('log'))\nvertical_logs = logs.where(lambda block: block.axis == 'y')\n"})}),"\n",(0,n.jsx)(t.h2,{id:"filtering-for-missing-properties",children:"Filtering for missing properties"}),"\n",(0,n.jsxs)(t.p,{children:["If a block state doesn't have a certain property, it will return the sentinel value ",(0,n.jsx)(t.code,{children:"BlockState.MISSING"}),".\nYou can use this to find blocks that don't have a certain property, or to only exclude blocks that have the wrong value for a property, but ignore blocks that don't have it at all."]}),"\n",(0,n.jsx)(t.p,{children:"For example:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:"tags = load_tags()\nlights = tags['lights']\non = lights.where(lambda state: state.lit in [BlockState.MISSING, 'true'])\n"})})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>r,x:()=>a});var n=s(6540);const o={},i=n.createContext(o);function r(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);