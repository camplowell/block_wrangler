"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[235],{4050:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>a,contentTitle:()=>t,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(4848),i=n(8453);const o={sidebar_position:2},t="Overview",l={id:"overview",title:"Overview",description:"What is Block Wrangler?",source:"@site/docs/overview.mdx",sourceDirName:".",slug:"/overview",permalink:"/block_wrangler/docs/overview",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Quickstart",permalink:"/block_wrangler/docs/quickstart"}},a={},c=[{value:"What is Block Wrangler?",id:"what-is-block-wrangler",level:2},{value:"Core Types",id:"core-types",level:2},{value:"Tags",id:"tags",level:3},{value:"Mappings",id:"mappings",level:3},{value:"Block types",id:"block-types",level:3},{value:"Block states",id:"block-states",level:3}];function d(e){const s={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.h1,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(s.h2,{id:"what-is-block-wrangler",children:"What is Block Wrangler?"}),"\n",(0,r.jsx)(s.p,{children:"Block Wrangler is a Python library that helps shaderpack developers manage block IDs."}),"\n",(0,r.jsx)(s.p,{children:"It allows you to:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Attach boolean properties to blocks or block states that can be used in shaders"}),"\n",(0,r.jsx)(s.li,{children:"Easily add or remove features from your shaderpack without manually editing the block IDs"}),"\n",(0,r.jsx)(s.li,{children:"Guarantee that block IDs are mutually exclusive, so that shaders can be written without worrying about collisions"}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"core-types",children:"Core Types"}),"\n",(0,r.jsx)(s.h3,{id:"tags",children:"Tags"}),"\n",(0,r.jsxs)(s.p,{children:["Block Wrangler uses ",(0,r.jsx)(s.strong,{children:"tags"})," to generate meaningful groups of blocks.\nThey can be defined in terms of specific blocks, other tags, or a combination of both."]}),"\n",(0,r.jsxs)(s.p,{children:["Vanilla Minecraft includes a number of tags, such as ",(0,r.jsx)(s.code,{children:"minecraft:crops"})," and ",(0,r.jsx)(s.code,{children:"minecraft:logs"}),", which can be used to represent groups of blocks."]}),"\n",(0,r.jsxs)(s.p,{children:["Block Wrangler also includes a number of common tags, such as ",(0,r.jsx)(s.code,{children:"sway"})," and ",(0,r.jsx)(s.code,{children:"lights"}),", which can be used to kickstart your own definitions."]}),"\n",(0,r.jsx)(s.h3,{id:"mappings",children:"Mappings"}),"\n",(0,r.jsxs)(s.p,{children:["Block Wrangler uses ",(0,r.jsx)(s.strong,{children:"mappings"})," to map block types to string-based identifiers that I call flags.\nThis is the only part of Block Wrangler that knows about the numerical IDs of blocks, and is used as part of the export process."]}),"\n",(0,r.jsx)(s.h3,{id:"block-types",children:"Block types"}),"\n",(0,r.jsxs)(s.p,{children:["A ",(0,r.jsx)(s.strong,{children:"block type"})," is a class that represents a specific type of block, such as ",(0,r.jsx)(s.code,{children:"minecraft:stone"})," or ",(0,r.jsx)(s.code,{children:"minecraft:oak_log"}),".\nIts definition includes its full name and all of its properties."]}),"\n",(0,r.jsx)(s.h3,{id:"block-states",children:"Block states"}),"\n",(0,r.jsxs)(s.p,{children:["A ",(0,r.jsx)(s.strong,{children:"block state"})," is a specific instance of a block type, such as ",(0,r.jsx)(s.code,{children:"minecraft:oak_log:axis=y"}),". It includes values for all of the block's properties."]})]})}function h(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);