"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[967],{6432:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>i});var t=s(4848),o=s(8453);const a={},l="Custom Flag Types",r={id:"advanced_usage/custom_flag_types",title:"Custom Flag Types",description:"Block Wrangler supports the most common flag types:",source:"@site/docs/advanced_usage/custom_flag_types.mdx",sourceDirName:"advanced_usage",slug:"/advanced_usage/custom_flag_types",permalink:"/block_wrangler/docs/advanced_usage/custom_flag_types",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Custom Blocks",permalink:"/block_wrangler/docs/advanced_usage/custom_blocks"},next:{title:"Custom Tags",permalink:"/block_wrangler/docs/advanced_usage/custom_tags"}},d={},i=[{value:"The structure of a flag",id:"the-structure-of-a-flag",level:2},{value:"Expanding flags into boolean flags",id:"expanding-flags-into-boolean-flags",level:3},{value:"Rendering the decoder function",id:"rendering-the-decoder-function",level:3},{value:"the Config class",id:"the-config-class",level:3},{value:"The FlagSequence class",id:"the-flagsequence-class",level:2},{value:"return_type",id:"return_type",level:3},{value:"render_value",id:"render_value",level:3},{value:"decoder_prefix and decoder_suffix",id:"decoder_prefix-and-decoder_suffix",level:3}];function c(e){const n={admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"custom-flag-types",children:"Custom Flag Types"}),"\n",(0,t.jsx)(n.p,{children:"Block Wrangler supports the most common flag types:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Booleans,"}),"\n",(0,t.jsx)(n.li,{children:"Integers,"}),"\n",(0,t.jsx)(n.li,{children:"Floats,"}),"\n",(0,t.jsx)(n.li,{children:"Enums"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"However, the user can also define their own custom flag types."}),"\n",(0,t.jsx)(n.h2,{id:"the-structure-of-a-flag",children:"The structure of a flag"}),"\n",(0,t.jsx)(n.p,{children:"A Flag is responsible for resolving its input into a set of boolean flags, and for rendering a decoder function in GLSL."}),"\n",(0,t.jsx)(n.h3,{id:"expanding-flags-into-boolean-flags",children:"Expanding flags into boolean flags"}),"\n",(0,t.jsxs)(n.p,{children:["Any Flag type must implement the ",(0,t.jsx)(n.code,{children:"expand_flags"})," method, which takes a flag name and returns a ",(0,t.jsx)(n.code,{children:"dict[str, BlockCollection]"}),".\nThe resulting keys are the names of the boolean flags, and must be unique. This is why the method is passed the flag name.\nThe values of the dictionary are the blocks that make up each boolean flag."]}),"\n",(0,t.jsx)(n.h3,{id:"rendering-the-decoder-function",children:"Rendering the decoder function"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"render_decoder"})," method takes the flag name, the mapping of block IDs to flags, and the global configuration.\nThe output is a ",(0,t.jsx)(n.code,{children:"Generator[str, Any, None]"})," that yields one line of GLSL at a time."]}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["The global configuration contains the ",(0,t.jsx)(n.code,{children:"id_type"})," field, which is the type of the numerical ID the decoder function shouold expect."]})}),"\n",(0,t.jsx)(n.h3,{id:"the-config-class",children:"the Config class"}),"\n",(0,t.jsxs)(n.p,{children:["Many Flag types have an inner ",(0,t.jsx)(n.code,{children:"Config"})," class that is used to customize the behavior of the Flag, and serve as factory classes for the Flag type.\nThey should be subclassed alongside the Flag class.",(0,t.jsx)(n.br,{}),"\n","For the most part, Configuration classes behave like normal dataclasses, and should define fields in the same way. All fields should be optional for best results."]}),"\n",(0,t.jsxs)(n.p,{children:["When subclassing an existing Flag type, you should override the ",(0,t.jsx)(n.code,{children:"Config"})," class's ",(0,t.jsx)(n.code,{children:"__call__"})," method, so that it creates the correct Flag type when called."]}),"\n",(0,t.jsx)(n.h2,{id:"the-flagsequence-class",children:"The FlagSequence class"}),"\n",(0,t.jsx)(n.p,{children:"Much of this functionality is provided by the FlagSequence class.\nIt is still quite flexible due to the use of helper methods."}),"\n",(0,t.jsx)(n.h3,{id:"return_type",children:"return_type"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"return_type"})," property is responsible for determining the return type of the decoder function."]}),"\n",(0,t.jsx)(n.h3,{id:"render_value",children:"render_value"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"render_value"})," method is responsible for rendering a value of the flag into GLSL code.\nIn many cases,"]}),"\n",(0,t.jsx)(n.h3,{id:"decoder_prefix-and-decoder_suffix",children:"decoder_prefix and decoder_suffix"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"decoder_prefix"})," and ",(0,t.jsx)(n.code,{children:"decoder_suffix"})," methods are responsible for adding any additional code that should appear before or after the decoder function."]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>r});var t=s(6540);const o={},a=t.createContext(o);function l(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);